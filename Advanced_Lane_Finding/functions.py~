import numpy as np
import cv2

def undistort(img):
    # Get mxt and dist arrays
    load = np.load('calibration.npz')
    mtx = load['arr_0']
    dist = load['arr_1']

    return cv2.undistort(img, mtx, dist, None, mtx)

def abs_sobel_thresh(img, orient='x', sobel_kernel=3, thresh=(0, 255)):
    # Take the derivative in x or y given orient = 'x' or 'y'
    if orient == 'x':
        sobel = cv2.Sobel(img, cv2.CV_64F, 1, 0, sobel_kernel)
    if orient == 'y':
        sobel = cv2.Sobel(img, cv2.CV_64F, 0, 1, sobel_kernel)
    # Take the absolute value of the derivative or gradient
    abs = np.absolute(sobel)
    # Scale to 8-bit (0 - 255) then convert to type = np.uint8
    scaled = np.uint8(255*abs/np.max(abs))
    # Create a mask of 1's where the scaled gradient magnitude
    binary_output = np.zeros_like(scaled)
    binary_output[(scaled >= thresh[0]) & (scaled <= thresh[1])] = 1

    return binary_output

def white_line_extraction(img):
    s1 = np.copy(img[:,:,0])
    s2 = np.copy(img[:,:,1])
    s3 = np.copy(img[:,:,2])

    d1 = np.zeros_like(s1)
    d2 = np.zeros_like(s2)
    d3 = np.zeros_like(s3)


    thr = 200

    d1[s1 >= thr] = 255
    d2[s2 >= thr] = 255
    d3[s3 >= thr] = 255

    final = np.zeros_like(s1)
    final[(d1==255) & (d2==255) & (d3==255)] = 1

    return final

def warp(img):
    img_size = (img.shape[1],img.shape[0])
    # Warping coordinates
    src = np.float32(
        [[750,480], #top right
         [1070,680], #bottom right
         [340,680], #bottom left
         [550,480]]) #top left
    dst = np.float32(
        [[800,0], #top right
         [800,img_size[1]], #bottom right
         [400,img_size[1]], #bottom left
         [400,0]]) #top left
    # Compute the perspective transform
    M = cv2.getPerspectiveTransform(src, dst)

    return cv2.warpPerspective(img, M, img_size, flags=cv2.INTER_LINEAR)

def unwarp(img):
    img_size = (img.shape[1],img.shape[0])
    # Warping coordinates
    src = np.float32(
        [[750,480], #top right
         [1070,680], #bottom right
         [340,680], #bottom left
         [550,480]]) #top left
    dst = np.float32(
        [[800,0], #top right
         [800,img_size[1]], #bottom right
         [400,img_size[1]], #bottom left
         [400,0]]) #top left
    # Compute the perspective transform
    Minv = cv2.getPerspectiveTransform(dst, src)

    return cv2.warpPerspective(img, Minv, img_size, flags=cv2.INTER_LINEAR)

def get_new_indices(binary_warped):
    # Assuming you have created a warped binary image called "binary_warped"
    # Take a histogram of the bottom half of the image
    histogram = np.sum(binary_warped[int(binary_warped.shape[0]/2):,:], axis=0)
    # Find the peak of the left and right halves of the histogram
    # These will be the starting point for the left and right lines
    midpoint = np.int(histogram.shape[0]/2)
    leftx_base = np.argmax(histogram[:midpoint])
    rightx_base = np.argmax(histogram[midpoint:]) + midpoint

    # Choose the number of sliding windows
    nwindows = 9
    # Set height of windows
    window_height = np.int(binary_warped.shape[0]/nwindows)
    # Identify the x and y positions of all nonzero pixels in the image
    nonzero = binary_warped.nonzero()
    nonzeroy = np.array(nonzero[0])
    nonzerox = np.array(nonzero[1])
    # Current positions to be updated for each window
    leftx_current = leftx_base
    rightx_current = rightx_base
    # Set the width of the windows +/- margin
    margin = 100
    # Set minimum number of pixels found to recenter window
    minpix = 50
    # Create empty lists to receive left and right lane pixel indices
    left_lane_inds = []
    right_lane_inds = []

    # Step through the windows one by one
    for window in range(nwindows):
        # Identify window boundaries in x and y (and right and left)
        win_y_low = binary_warped.shape[0] - (window+1)*window_height
        win_y_high = binary_warped.shape[0] - window*window_height
        win_xleft_low = leftx_current - margin
        win_xleft_high = leftx_current + margin
        win_xright_low = rightx_current - margin
        win_xright_high = rightx_current + margin
        # Identify the nonzero pixels in x and y within the window
        good_left_inds = ((nonzeroy >= win_y_low) & (nonzeroy < win_y_high) & (nonzerox >= win_xleft_low) & (nonzerox < win_xleft_high)).nonzero()[0]
        good_right_inds = ((nonzeroy >= win_y_low) & (nonzeroy < win_y_high) & (nonzerox >= win_xright_low) & (nonzerox < win_xright_high)).nonzero()[0]
        # Append these indices to the lists
        left_lane_inds.append(good_left_inds)
        right_lane_inds.append(good_right_inds)
        # If you found > minpix pixels, recenter next window on their mean position
        if len(good_left_inds) > minpix:
            leftx_current = np.int(np.mean(nonzerox[good_left_inds]))
        if len(good_right_inds) > minpix:
            rightx_current = np.int(np.mean(nonzerox[good_right_inds]))

    # Concatenate the arrays of indices
    left_lane_inds = np.concatenate(left_lane_inds)
    right_lane_inds = np.concatenate(right_lane_inds)

    return left_lane_inds, right_lane_inds


def get_lane_fits(binary_warped, left_lane_inds, right_lane_inds):
    # Identify the x and y positions of all nonzero pixels in the image
    nonzero = binary_warped.nonzero()
    nonzeroy = np.array(nonzero[0])
    nonzerox = np.array(nonzero[1])
    
    leftx = nonzerox[left_lane_inds]
    lefty = nonzeroy[left_lane_inds]
    rightx = nonzerox[right_lane_inds]
    righty = nonzeroy[right_lane_inds]
    
    left_fit = np.polyfit(lefty, leftx, 2)
    right_fit = np.polyfit(righty, rightx, 2)
    
    return left_fit, right_fit, lefty, leftx, righty, rightx


def identify_lanes(binary_warped, left_fit, right_fit):
    ploty = np.linspace(0, binary_warped.shape[0]-1, binary_warped.shape[0] )
    left_fitx = left_fit[0]*ploty**2 + left_fit[1]*ploty + left_fit[2]
    right_fitx = right_fit[0]*ploty**2 + right_fit[1]*ploty + right_fit[2]

    return ploty, left_fitx, right_fitx

def curvature(ploty, lefty, righty, leftx, rightx):
    ym_per_pix = 30/720 # meters per pixel in y dimension
    xm_per_pix = 3.7/700 # meters per pixel in x dimension

    y_eval = np.max(ploty)

    # Fit new polynomials to x,y in world space
    left_fit_cr = np.polyfit(lefty*ym_per_pix, leftx*xm_per_pix, 2)
    right_fit_cr = np.polyfit(righty*ym_per_pix, rightx*xm_per_pix, 2)
    # Calculate the new radii of curvature
    left_curverad = ((1 + (2*left_fit_cr[0]*y_eval*ym_per_pix + left_fit_cr[1])**2)**1.5) / np.absolute(2*left_fit_cr[0])
    right_curverad = ((1 + (2*right_fit_cr[0]*y_eval*ym_per_pix + right_fit_cr[1])**2)**1.5) / np.absolute(2*right_fit_cr[0])

    return left_curverad, right_curverad

#def binary_extraction(undist):
#    color = cv2.cvtColor(np.copy(undist),cv2.COLOR_RGB2HLS)
#    white = white_line_extraction(undist)
#    
#    gradx = abs_sobel_thresh(np.copy(color[:,:,2]), orient='x', sobel_kernel=3, thresh=(20, 100))
#    wgradx = abs_sobel_thresh(white, orient='x', sobel_kernel=3, thresh=(20, 100))
#    
#    combined = np.zeros_like(gradx)
#   combined[(gradx == 1) | (wgradx == 1)] = 1
#    combined = combined.astype('float64')
# 
#    return combined

def binary_extraction(undist):
    color = cv2.cvtColor(undist, cv2.COLOR_RGB2HLS)
     
    s_thresh = abs_sobel_thresh(color[:,:,2], orient='x', sobel_kernel=5, thresh = (25,100))
     
    y_thresh = np.zeros_like(undist[:,:,0])
    y_thresh[(undist[:,:,0] > 125) & (undist[:,:,1] > 125) & (undist[:,:,2] < 125)] = 1
     
    l_thresh = np.zeros_like(color[:,:,1])
    l_thresh[color[:,:,1] > 125] = 1
     
    combined = np.zeros_like(undist[:,:,0])
    combined[((l_thresh == 1) | (y_thresh == 1)) & (s_thresh == 1)] = 1
     
    combined = combined.astype('float64')
    
    return combined

def apply_mask(img):
    out = np.copy(img)
    mask = np.ones(np.shape(out))
    mask[:,:375] *= 0
    mask[:,825:] *= 0
    mask[:,475:750] *= 0

    out *= mask
    
    out = out.astype('uint8')

    return out

def draw_lanes(img, ploty, left_fitx, right_fitx):
    # Create an image to draw the lines on
    warp_zero = np.zeros_like(img).astype(np.uint8)

    # Recast the x and y points into usable format for cv2.fillPoly()
    pts_left = np.array([np.transpose(np.vstack([left_fitx, ploty]))])
    pts_right = np.array([np.flipud(np.transpose(np.vstack([right_fitx, ploty])))])
    pts = np.hstack((pts_left, pts_right))

    # Draw the lane onto the warped blank image
    cv2.fillPoly(warp_zero, np.int_([pts]), (0,255, 0))

    return warp_zero

def unwarp_lanes(img, warp_zero):

    # Warp the blank back to original image space using inverse perspective matrix (Minv)
    newwarp = unwarp(warp_zero)
    # Combine the result with the original image
    result = cv2.addWeighted(img, 1, newwarp, 0.3, 0)

    return result

def write_text(img, left_fitx, right_fitx, left_curverad, right_curverad):
    result = np.copy(img)
    
    # Lane curvature
    avg_curve = np.mean([right_curverad, left_curverad])
    
    # Car position
    camera_position = result.shape[0]/2
    lane_center = (right_fitx[719] + left_fitx[719])/2
    center_offset_pixels = abs(camera_position - lane_center)
    shift = center_offset_pixels*4/(7.5*result.shape[0])
    if camera_position < lane_center:
        side = 'left'
    else:
        side = 'right'
    
    font = cv2.FONT_HERSHEY_SIMPLEX
    cv2.putText(result,'Radius of Curvature = ' + "%.4f" % avg_curve + '(m)',(200,50), font, 1,(255,255,255),2,cv2.LINE_AA)
    cv2.putText(result,'Vehicle is ' + "%.3f" % shift + '(m) ' + str(side) + ' of center',(200,125), font, 1,(255,255,255),2,cv2.LINE_AA)
    
    return result
    
